//* 삽입정렬이란 요소를 하나씩 바꿔가며 정렬하는 알고리즘을 말한다.
const insertionSort = function (arr, cb) {
  for (let i = 0; i < arr.length; i++) {
    let j;
    //* 임시변수 tmp에 현재 탐색하려는 요소를 할당한다. 
    let tmp = arr[i];
    //* j는 i로 할당하여 배열에서 탐색을 시작하는 위치를 박아놓고,
    //* j-1번째 요소가 j번째 요소(임시변수 tmp)보다 크다면 (ex : [2,1] ==> [1,2] 으로 바꾸는 작업을 해야 하는 것임.) 
    for (j = i; j > 0 && arr[j - 1] > tmp; j--){
      //* j번째 요소와 j-1번째 요소의 위치를 바꾼다.
      //* i번째, 현재 탐색 중인 요소 이전의 것들도 같은 방식으로 비교한다.
      arr[j] = arr[j - 1];
    }
    //* 최종적으로 j번째 요소를 저장해놨던 임시변수(탐색한 요소)로 변경한다. 
    arr[j] = tmp;
  }
  return arr;
};

//! 리뷰 요청 : Advanced 예제 풀이
//* 위 코드로 Basic Request는 전부 만족하였습니다.
//* Advanced의 콜백 적용 예제 arr = [-10, -11, 2, 29] 의 경우
//* 콜백 함수 const cb = (item) => item * item; 을 각 요소마다 적용하여, 
//* 콜백 함수가 적용된 값을 기준으로 순서를 정하는 것인데, 최종 결과 값은 기존 요소로 나열해야 한다.
//* 원본 arr에 대한 idx 배열을 하나 선언해서, 콜백 함수가 적용된 배열이 정렬함수에 들어가 순서가 바뀔 때마다
//* idx 배열도 움직이게 하여 최종적으로는 idx 배열의 순서대로 원본 배열을 다시 정렬하려 했으나
//* 이 부분을 어떻게 구현해야 하는지에서 막혔고, 또 좋은 방법이 아닌 것 같습니다.
